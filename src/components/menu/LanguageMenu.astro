---
import i18next from 'i18next';
import { localizePath } from 'astro-i18next';

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;

const { pathname } = Astro.url;

const {
  languageMapping = [
    { label: 'ENG', locale: 'en' },
    { label: 'UKR', locale: 'ua' },
  ],
} = Astro.props;
---

<div class='relative z-[3]'>
    <div
      id='outsideLang'
      class='invisible fixed top-0 left-0 right-0 bottom-0 z-[4]'
    ></div>
  {
    () => {
      const activeLanguage = languageMapping.find(
        (language) => language.locale === currentLanguage
      );

      return (
        <button
          type='button'
          id='menuLangBtn'
          class='relative flex flex-col items-center justify-around w-10 h-7 z-[3]'
        >
          {activeLanguage.label}
        </button>
      );
    }
  }
  <nav
    id='menuLang'
    class='invisible absolute top-[40px] right-0 z-[5] flex flex-col w-[300px] bg-white rounded-lg -translate-y-10 opacity-0 transition-all duration-150 shadow-lg'
  >
    {
      languageMapping.map(({ locale, label }) => {
        let value = localizePath(pathname, locale);

        return (
          <a
            href={value}
            class={`${
              locale === currentLanguage ? 'active' : ''
            } block text-base leading-none whitespace-nowrap text-center py-4 last:pr-0 border-b border-gray-400 border-opacity-10 last:border-transparent`}
          >
            {label}
          </a>
        );
      })
    }
  </nav>
</div>

<script>
  const outclick = document.getElementById('outsideLang');
  const menuButton = document.getElementById('menuLangBtn');
  const menuBlock = document.getElementById('menuLang');
  let flag = true;

  const handleClick = () => {
    if (flag) {
      menuBlock.classList.remove('invisible', '-translate-y-10', 'opacity-0');
      menuBlock.classList.add('visable', 'translate-y-0', 'opacity-1');
      outclick.classList.remove('invisible');
      outclick.classList.add('visible');
      flag = false;
    }
  };

  const onCloseMenu = () => {
    menuBlock.classList.add('invisible', '-translate-y-10', 'opacity-0');
    menuBlock.classList.remove('visable', 'translate-y-0', 'opacity-1');
    outclick.classList.add('invisible');
    outclick.classList.remove('visible');
    flag = true;
  };

  menuButton.addEventListener('click', handleClick);
  outclick.addEventListener('click', onCloseMenu);
</script>
